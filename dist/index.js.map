{"version":3,"sources":["../src/index.js"],"names":["port","process","env","PORT","corsOptions","origin","optionsSuccessStatus","app","use","bodyParser","urlencoded","extended","json","router","listen","console","log","get","req","res","message","queryResponse","result","checkoutOptions","amount","createToken","postbackUrl","paymentMethods","customerData","customer","external_id","name","type","country","email","documents","number","phone_numbers","birthday","billing","address","state","city","neighborhood","street","street_number","zipcode","items","id","title","unit_price","quantity","tangible","status","setHeader","params","post","query","arrayValues","body","nome","sobreNome","senha","tipoCliente","codeResult","success","Object","assign","data","error","codeRestult","errorMsg","con","end","send","headerParams","headers","accesskey","perfil","undefined","ddd","telefone","dataResponse","tpCliente","situacao","confirmPassword","successPassword","pefilSite","Buffer","from","toString","perfilAPI","IDuser","accessKey","errorPassword"],"mappings":"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","file":"index.js","sourcesContent":["import { app, router} from './app';\nimport cors from 'cors';\nimport bodyParser from 'body-parser';\nimport { execquery } from './queries';\nimport { PasswordCreate, PasswordCompare, Encrypt, Decrypt } from './utils/password';\nimport { SetTimeEncrypt, IsValidTime } from './utils/tempoAcesso'\n\nconst port = process.env.PORT || 9002;\n\nconst corsOptions = {\n  origin: 'http://localhost:9000',\n  optionsSuccessStatus: 200 \n}\n\napp.use(bodyParser.urlencoded({ extended: true }));\napp.use(bodyParser.json());\napp.use(cors());\napp.use('/', router);\n\napp.listen(port, () => {\n  console.log(`server rodando na portela ${port}`);\n})\n\nrouter.get('/', (req, res) => res.json({ message: 'Funcionando!' }));\n\nrouter.get('/clientes', cors(corsOptions), (req, res) => {\n  execquery('SELECT * FROM tb_users', [], (queryResponse) => {\n    res.json(queryResponse.result);\n    console.log('>>>', queryResponse.result);\n  } );\n});\n\nrouter.get('/checkout/initiate/:id',(req,res)=>{\n    //under construction (não remover)\n\n  //aqui serve para criarmos o carrinho\n});\n\nrouter.get('/checkout/create/:id',(req,res)=>{\n  //under construction (não remover)\n  // https://docs.pagar.me/docs/inserindo-o-checkout\n\n  let checkoutOptions = {\n    amount: 8000,\n    createToken: true,\n    postbackUrl: '',\n    paymentMethods: 'redit_card',\n    customerData: false,\n    customer: {\n      external_id: '#123456789', //codigo do cliente no meu sistema\n      name: 'Fulano',\n      type: 'individual',\n      country: 'br',\n      email: 'fulano@email.com',\n      documents: [\n        {\n          type: 'cpf',\n          number: '71404665560',\n        },\n      ],\n      phone_numbers: ['+5511999998888', '+5511888889999'],\n      birthday: '1985-01-01',\n    },\n    billing: {\n      name: 'Ciclano de Tal',\n      address: {\n        country: 'br',\n        state: 'SP',\n        city: 'São Paulo',\n        neighborhood: 'Fulanos bairro',\n        street: 'Rua dos fulanos',\n        street_number: '123',\n        zipcode: '05170060'\n      }\n    },\n    items: [\n      {\n        id: '1', //codigo do meu produto/serviço\n        title: 'Bola de futebol',\n        unit_price: 12000,\n        quantity: 1,\n        tangible: true\n      }\n    ]\n  };\n\n  return res.status(200).json(checkoutOptions);\n\n});\n\n\nrouter.get('/cliente/:id', (req, res) => {\n  res.setHeader('Content-Type', 'application/json')\n  execquery('SELECT * FROM tb_users WHERE IDuser=?', res, [req.params.id]);\n});\n\nrouter.post('/cadastro', (req, res) => {\n  const query = `insert into tb_users (nome, sobrenome, email, senha, ddd, avaliacaoProfissional, IDcategoriaUser, IDservicoUser, oauth_provider, oauth_uid, picture, link, created, modified, locale, gender, codCliente, codClienteEncript,tpCliente) values(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?)`;\n  const arrayValues = [req.body.nome, req.body.sobreNome, req.body.email, PasswordCreate(req.body.senha, 10), '', '', 0, 0, '', '', '', '', '', '', '', '', 0, 0,req.body.tipoCliente]\n  \n  execquery(query, arrayValues, (queryResponse) =>  {\n    if(queryResponse.result.codeResult === 0) {\n      const success = Object.assign(queryResponse.result, {data: null});\n      res.json(success);\n    } else {\n      const error = Object.assign(queryResponse.result, {codeRestult: 1, errorMsg: 'Cadastro não realizado', data: null});\n      res.json(error);\n    }\n    if(!queryResponse.result)\n      queryResponse.con.end();\n  });\n});\n\nrouter.get('/validkey/:id',(req,res)=>{\n  \n  res.send( IsValidTime( req.params.id ));\n\n});\n\nrouter.post('/registerdetails',(req,res)=>{\n  const headerParams = req.headers;\n\n  if(!IsValidTime(headerParams.accesskey )) {\n    return res.status(401).json({error: 'invalid access-key'}) \n  }\n\n  if(headerParams.perfil == undefined) {\n    return res.status(401).json({error: 'perfil needed'}) \n  }\n\n  const query = `update tb_users SET nome = ?,email=?,ddd=?,telefone=? WHERE IdUser =?`;\n  const arrayValues = [req.body.nome, req.body.email, req.body.ddd, req.body.telefone, Decrypt(headerParams.perfil)]\n  \n  execquery(query, arrayValues, (queryResponse) => {\n    if(!queryResponse.result){\n      queryResponse.con.end();\n      return res.status(404).json({error: 'Not record found'}) \n    }\n    const success = Object.assign(queryResponse.result, {data: null});\n    res.json(success);\n  });\n});\n\nrouter.get('/registerdetails', (req,res) => {\n\n  const headerParams = req.headers;\n\n  if (!IsValidTime(headerParams.accesskey)) {\n    return res.status(401).json({error: 'invalid access-key'}) \n  }\n\n  if (headerParams.perfil == undefined) {\n    return res.status(401).json({error: 'perfil needed'}) \n  }\n\n  const query = `select nome, tpCliente,status, email,ddd,telefone from tb_users WHERE IdUser = ?`;\n  const arrayValues = [Decrypt(headerParams.perfil)];\n\n  execquery(query, arrayValues, (queryResponse) =>  {\n    if(!queryResponse.result){\n      \n      queryResponse.con.end();\n      return res.status(404).json({error: 'Not record found'}) \n\n    }\n\n      const dataResponse = Object.assign(queryResponse.result, {data: {\n                                                                      nome: queryResponse.result.data[0].nome,\n                                                                      perfil:queryResponse.result.data[0].tpCliente ,\n                                                                      situacao: queryResponse.result.data[0].status == 1 ? \"ATIVO\" : \"INATIVO\",\n                                                                      email: queryResponse.result.data[0].email,\n                                                                      ddd : queryResponse.result.data[0].ddd,\n                                                                      telefone: queryResponse.result.data[0].telefone}\n                                                                      \n      });\n      res.json(dataResponse)    \n      \n  });\n});\n\nrouter.post('/login', (req, res) => {\n  const query = 'select IDuser, nome,senha,tpCliente,status from tb_users WHERE email = ?';\n  \n\n  const arrayValues = [req.body.email];\n \n  execquery(query, arrayValues, (queryResponse) =>  {\n    console.log(queryResponse);\n    let confirmPassword = PasswordCompare(req.body.senha, queryResponse.result.data[0].senha);\n    if(confirmPassword) {\n      const successPassword = Object.assign(queryResponse.result, {data: {\n                                                                      nome: queryResponse.result.data[0].nome,\n                                                                      pefilSite: Buffer.from(queryResponse.result.data[0].tpCliente ).toString(\"base64\"),\n                                                                      situacao: Buffer.from(queryResponse.result.data[0].status == 1 ? \"ATIVO\" : \"INATIVO\" ).toString(\"base64\"),\n                                                                      perfilAPI : {\n                                                                        perfil: Encrypt((queryResponse.result.data[0].IDuser).toString() ),\n                                                                        accessKey: SetTimeEncrypt()  ,\n                                                                      }\n      }});\n      res.json(successPassword)\n    } else {\n      const errorPassword = Object.assign(queryResponse.result, {codeRestult: 1, errorMsg: 'Senha inválida', data: null});\n      res.json(errorPassword)\n    }\n\n    if(!queryResponse.result)\n      queryResponse.con.end();\n  });\n\n})"]}