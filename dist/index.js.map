{"version":3,"sources":["../src/index.js"],"names":["port","process","env","PORT","corsOptions","origin","optionsSuccessStatus","app","use","bodyParser","urlencoded","extended","json","router","listen","console","log","get","req","res","message","queryResponse","result","setHeader","params","id","post","query","arrayValues","body","nome","sobreNome","email","senha","codeResult","success","Object","assign","data","error","codeRestult","errorMsg","con","end","confirmPassword","successPassword","errorPassword"],"mappings":"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","file":"index.js","sourcesContent":["import { app, router} from './app';\r\nimport cors from 'cors';\r\nimport bodyParser from 'body-parser';\r\nimport { execquery, connection } from './queries';\r\nimport { PasswordCreate, PasswordCompare } from './utils/password';\r\n\r\nconst port = process.env.PORT || 9002;\r\n\r\nconst corsOptions = {\r\n  origin: 'http://localhost:9000',\r\n  optionsSuccessStatus: 200 // some legacy browsers (IE11, various SmartTVs) choke on 204\r\n}\r\n\r\napp.use(bodyParser.urlencoded({ extended: true }));\r\napp.use(bodyParser.json());\r\napp.use(cors());\r\napp.use('/', router);\r\n\r\napp.listen(port, () => {\r\n  console.log(`server rodando na portela ${port}`);\r\n})\r\n\r\nrouter.get('/', (req, res) => res.json({ message: 'Funcionando!' }));\r\n\r\nrouter.get('/clientes', cors(corsOptions), (req, res) => {\r\n  execquery('SELECT * FROM tb_users', [], (queryResponse) => {\r\n    res.json(queryResponse.result);\r\n    console.log('>>>', queryResponse.result);\r\n  } );\r\n})\r\n\r\nrouter.get('/cliente/:id', (req, res) => {\r\n  res.setHeader('Content-Type', 'application/json')\r\n  console.log(\"req.body\", req);\r\n  execquery('SELECT * FROM tb_users WHERE IDuser=?', res, [req.params.id]);\r\n})\r\n\r\nrouter.post('/cadastro', (req, res) => {\r\n  const query = `insert into tb_users (nome, sobrenome, email, senha, ddd, avaliacaoProfissional, IDcategoriaUser, IDservicoUser, oauth_provider, oauth_uid, picture, link, created, modified, locale, gender, codCliente, codClienteEncript) values(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`;\r\n  const arrayValues = [req.body.nome, req.body.sobreNome, req.body.email, PasswordCreate(req.body.senha, 10), '', '', 0, 0, '', '', '', '', '', '', '', '', 0, 0]\r\n  \r\n  execquery(query, arrayValues, (queryResponse) =>  {\r\n    if(queryResponse.result.codeResult === 0) {\r\n      const success = Object.assign(queryResponse.result, {data: null});\r\n      res.json(success);\r\n    } else {\r\n      const error = Object.assign(queryResponse.result, {codeRestult: 1, errorMsg: 'Cadastro não realizado', data: null});\r\n      res.json(error);\r\n    }\r\n    if(!queryResponse.result)\r\n      queryResponse.con.end();\r\n  });\r\n})\r\n\r\nrouter.post('/login', (req, res) => {\r\n  const query = 'SELECT senha FROM tb_users WHERE email = ?';\r\n  const arrayValues = [req.body.email]\r\n\r\n  execquery(query, arrayValues, (queryResponse) =>  {\r\n    let confirmPassword = PasswordCompare(req.body.senha, queryResponse.result.data[0].senha);\r\n\r\n    if(confirmPassword) {\r\n      const successPassword = Object.assign(queryResponse.result, {data: null})\r\n      res.json(successPassword)\r\n    } else {\r\n      const errorPassword = Object.assign(queryResponse.result, {codeRestult: 1, errorMsg: 'Senha inválida', data: null});\r\n      res.json(errorPassword)\r\n    }\r\n\r\n    if(!queryResponse.result)\r\n      queryResponse.con.end();\r\n  });\r\n\r\n})"]}